local allowedPlaceIds = {
    [72615021017011] = true,
    [79326806968179] = true
}

if not allowedPlaceIds[game.PlaceId] then
    game.StarterGui:SetCore("SendNotification", {
        Title = "Script Hub",
        Text = "‚ùå This script is not available in this game.",
        Duration = 6
    })
    return
end

-- Key System starts below
local KeyGuardLibrary = loadstring(game:HttpGet("https://cdn.keyguardian.org/library/v1.0.0.lua"))()
local trueData = "4494a184ab8f4d63a393b2644cce3882"
local falseData = "af67322c1ba84817b1877c3f9ced8009"

KeyGuardLibrary.Set({
	publicToken = "70f393220ce447579bdfb88a4e8ade5c",
	privateToken = "abc9a05c491d4f729f25a8633cae406b",
	trueData = trueData,
	falseData = falseData,
})

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local key = ""
local KEY_FILE = "cutehub_key.txt"

-- GUI Setup
local Window = Fluent:CreateWindow({
	Title = "Key System",
	SubTitle = "Cute Hub",
	TabWidth = 160,
	Size = UDim2.fromOffset(580, 340),
	Acrylic = false,
	Theme = "Dark",
	MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
	KeySys = Window:AddTab({ Title = "Key System", Icon = "key" }),
}

-- Check if key matches format: CUTE_ + 32 hex chars
local function isValidKeyFormat(k)
	return typeof(k) == "string" and k:match("^CUTE_%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x$") ~= nil
end

-- Key validation function
local function validateAndLoad(k)
	Fluent:Notify({
		Title = "Checking Key...",
		Content = "‚è≥ Please wait...",
		Duration = 2
	})

	task.spawn(function()
		local response = KeyGuardLibrary.validateDefaultKey(k)
		if response == trueData then
			Fluent:Notify({
				Title = "Success",
				Content = "‚úÖ Key is valid! Loading script...",
				Duration = 4
			})
			pcall(function()
				writefile(KEY_FILE, k)
			end)
			task.wait(1.5)
			loadstring(game:HttpGet("https://raw.githubusercontent.com/ckashckash/ckashinggg/refs/heads/main/asjdklasd"))()
           
			-- Destroy the window once the key is valid
			Window:Destroy()
		else
			Fluent:Notify({
				Title = "Invalid Key",
				Content = "‚ùå The key you entered is incorrect.",
				Duration = 4
			})
		end
	end)
end

pcall(function()
	if isfile(KEY_FILE) then
		local savedKey = readfile(KEY_FILE)
		if savedKey and isValidKeyFormat(savedKey) then
			validateAndLoad(savedKey)
		end
	end
end)

local Entkey = Tabs.KeySys:AddInput("Input", {
	Title = "Enter Key",
	Description = "Enter Key Here",
	Default = "",
	Placeholder = "Enter key‚Ä¶",
	Numeric = false,
	Finished = false,
	Callback = function(Value)
		key = Value
	end
})

local Checkkey = Tabs.KeySys:AddButton({
	Title = "Check Key",
	Description = "Enter Key before pressing this button",
	Callback = function()
		if not isValidKeyFormat(key) then
			Fluent:Notify({
				Title = "Invalid Format",
				Content = "‚ùó Key must be in the format: CUTE_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
				Duration = 4
			})
			return
		end
		validateAndLoad(key)
	end
})

local Getkey = Tabs.KeySys:AddButton({
	Title = "Get Key",
	Description = "Get Key here",
	Callback = function()
		setclipboard(KeyGuardLibrary.getLink())
		Fluent:Notify({
			Title = "Link Copied",
			Content = "üìã Key link copied to clipboard.",
			Duration = 3
		})
	end
})

Window:SelectTab(1)
